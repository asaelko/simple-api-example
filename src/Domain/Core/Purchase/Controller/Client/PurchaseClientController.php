<?php

namespace App\Domain\Core\Purchase\Controller\Client;

use App\Domain\Core\Partners\Repository\PartnersRepository;
use App\Domain\Core\Purchase\Controller\Client\Request\UpdatePurchaseRequest;
use App\Domain\Core\Purchase\Controller\Client\Response\PurchaseResponse;
use App\Domain\Core\Purchase\Service\PurchaseService;
use CarlBundle\Entity\Client;
use CarlBundle\Entity\Drive;
use CarlBundle\Entity\Partner;
use CarlBundle\Exception\InvalidValueException;
use CarlBundle\Exception\RestException;
use CarlBundle\Exception\ValueAlreadyUsedException;
use CarlBundle\Factory\Purchase\PurchaseFactory;
use CarlBundle\Request\Purchase\CreatePurchaseRequest;
use DealerBundle\Entity\DriveOffer;
use DealerBundle\Repository\DriveOfferRepository;
use Nelmio\ApiDocBundle\Annotation\Model as Model;
use OpenApi\Annotations as OA;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class PurchaseClientController extends AbstractController
{
    private PurchaseService $purchaseService;
    private DriveOfferRepository $offerRepository;
    private PartnersRepository $partnersRepository;
    private PurchaseFactory $purchaseFactory;

    public function __construct(
        PurchaseService $purchaseService,
        PurchaseFactory $purchaseFactory,
        DriveOfferRepository $offerRepository,
        PartnersRepository $partnersRepository
    )
    {
        $this->purchaseService = $purchaseService;
        $this->offerRepository = $offerRepository;
        $this->partnersRepository = $partnersRepository;
        $this->purchaseFactory = $purchaseFactory;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
     *
     * @OA\Get(operationId="purchase/current")
     *
     * @OA\Response(
     *     response=200,
     *     description="–í–µ—Ä–Ω—ë—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
     *     @OA\JsonContent(
     *          @OA\Property(
     *                  property="id",
     *                  description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å",
     *                  type="string",
     *                  example="3894bf8e271811eab3720242ac110003",
     *                  nullable=true
     *          ),
     *          @OA\Property(
     *              property="state",
     *              type="object",
     *              description="–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
     *                  @OA\Property(
     *                      property="decision",
     *                      description="–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏",
     *                      type="integer",
     *                      example="0",
     *                      nullable=true
     *                  ),
     *                  @OA\Property(
     *                      property="header",
     *                      description="–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ",
     *                      type="string",
     *                      example="–ö—É–ø–∏–ª–∏ –∞–≤—Ç–æ —Å –ø–æ–º–æ—â—å—é CARL?"
     *                  ),
     *                  @OA\Property(
     *                      property="text",
     *                      description="–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ",
     *                      type="string",
     *                      example="–ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ —Ç—É—Ç!"
     *                  )
     *      )
     *    )
     * )
     *
     * @OA\Tag(name="Client\Purchase")
     *
     * @return array|PurchaseResponse
     */
    public function getCurrentPurchase()
    {
        $purchase = $this->purchaseService->getActivePurchase();

        $result = [
            'state' => [
                'header' => '–ö—É–ø–∏–ª–∏ –∞–≤—Ç–æ —Å –ø–æ–º–æ—â—å—é CARL?',
                'text' => '–ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ —Ç—É—Ç!'
            ]
        ];

        if (!$purchase) {
            return $result;
        }

        return new PurchaseResponse($purchase);
    }

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏
     *
     * @OA\Get(operationId="purchase/request/params")
     *
     * @OA\Response(
     *     response=200,
     *     description="–í–µ—Ä–Ω—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞",
     *     @OA\JsonContent(
     *          @OA\Property(
     *              property="params",
     *              type="array",
     *              description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞",
     *              @OA\Items(
     *                  @OA\Property(
     *                      property="text",
     *                      description="–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø—Ä–æ—Å–∞",
     *                      type="string",
     *                      example="–ü–æ—Å–ª–µ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤–∞ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –º–æ–¥–µ–ª—å—é"
     *                  ),
     *                  @OA\Property(
     *                      property="options",
     *                      description="–ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–≤–µ—Ç–∞",
     *                      type="array",
     *                      @OA\Items(
     *                          @OA\Property(
     *                              property="id",
     *                              description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏",
     *                              type="integer",
     *                              example="559"
     *                          ),
     *                          @OA\Property(
     *                              property="name",
     *                              description="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
     *                              type="string",
     *                              example="Tesla Model 3"
     *                          ),
     *                          @OA\Property(
     *                              property="photo",
     *                              description="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É",
     *                              type="string",
     *                              example="https://carl-drive.ru/blank.png"
     *                          )
     *                      )
     *                   ),
     *                   @OA\Property(
     *                      property="no_options",
     *                      description="–û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø—Ü–∏–π. –ë—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç",
     *                      type="object",
     *                      nullable=true,
     *                          @OA\Property(
     *                              property="icon",
     *                              description="–≠–º–æ–¥–∂–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
     *                              type="string",
     *                              example="ü§î"
     *                          ),
     *                          @OA\Property(
     *                              property="text",
     *                              description="–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
     *                              type="string",
     *                              example="–ó–∞–∫–∞–∂–∏—Ç–µ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤"
     *                          )
     *                   )
     *          )
     *      )
     *    )
     * )
     *
     * @OA\Tag(name="Client\Purchase")
     *
     * @return array
     */
    public function getRequestParams(): array
    {
        /** @var Client $client */
        $client = $this->getUser();

        $activeDrives = $client->getDrivesByStatus(Drive::$finishedStates)->toArray();
        $drivesModels = [];
        array_walk($activeDrives, static function(Drive $drive) use (&$drivesModels) {
            $drivesModels[$drive->getCar()->getModel()->getNameWithBrand()] = [
                'id' => $drive->getCar()->getModel()->getId(),
                'name' => $drive->getCar()->getModel()->getNameWithBrand(),
                'photo' => $drive->getCar()->getModel()->getAppPhoto()
            ];
        });
        $drivesModels = array_values($drivesModels);

        $offers = $this->offerRepository->findForClientProfile($client);
        $offersModels = [];
        array_walk($offers, static function(DriveOffer $offer) use (&$offersModels) {
            $offersModels[$offer->getDealerCar()->getEquipment()->getModel()->getNameWithBrand()] = [
                'id' => $offer->getDealerCar()->getEquipment()->getModel()->getId(),
                'name' => $offer->getDealerCar()->getEquipment()->getModel()->getNameWithBrand(),
                'photo' => $offer->getDealerCar()->getEquipment()->getModel()->getAppPhoto(),
            ];
        });
        $offersModels = array_values($offersModels);

        $params = [
            'params' => [
                [
                    'text' => '–ü–æ—Å–ª–µ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤–∞ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –º–æ–¥–µ–ª—å—é',
                    'options' => $drivesModels,
                    'no_options' => $drivesModels ? null : [
                        'icon' => 'ü§î',
                        'text' => '–•–º, –∫–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤–æ–≤. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–æ–µ–∑–¥–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!',
                    ],
                ],
                [
                    'text' => '–î–∏–ª–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –≤—ã–≥–æ–¥–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                    'options' => $offersModels,
                    'no_options' => $offersModels ? null : [
                        'icon' => 'üò¨',
                        'text' => '–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∞ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –ª—É—á—à—É—é —Ü–µ–Ω—É!',
                    ],
                ],
            ]
        ];

        return $params;
    }

    /**
     * –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
     *
     * @OA\Get(operationId="purchase/gifts")
     *
     * @OA\Response(
     *     response=200,
     *     description="–í–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
     *     @OA\JsonContent(
     *          type="array",
     *          @OA\Items(
     *                  @OA\Property(
     *                      property="title",
     *                      description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞",
     *                      type="string",
     *                      example="–¢–æ–ø–ª–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞"
     *                  ),
     *                  @OA\Property(
     *                      property="subtitle",
     *                      description="–ü–æ–¥–ø–∏—Å—å –ø–æ–¥–∞—Ä–∫–∞",
     *                      type="string",
     *                      example="–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"
     *                  ),
     *                  @OA\Property(
     *                      property="description",
     *                      description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞",
     *                      type="string",
     *                      example="<p>–¢–æ–ø–ª–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ 60 –ª–∏—Ç—Ä–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ...</p>"
     *                  ),
     *                  @OA\Property(
     *                      property="photo",
     *                      description="–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
     *                      type="object"
     *                  ),
     *                  @OA\Property(
     *                      property="splashPhoto",
     *                      description="–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞",
     *                      type="object"
     *                  )
     *      )
     *    )
     * )
     *
     * @OA\Tag(name="Client\Purchase")
     *
     * @return array
     */
    public function getGifts(): array
    {
        $result = array_map(
            static function(Partner $partner) {
                return [
                    'title' => $partner->getSubtitle(),
                    'photo' => $partner->getPhoto(),
                    'description' => $partner->getDescription(),
                    'splashPhoto' => $partner->getSplashPhoto(),
                    'storyPhoto' => $partner->getStoryPhoto(),
                    'subtitle' => '–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫'
                ];
            },
            $this->partnersRepository->getActive()
        );

        return $result;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
     *
     * @OA\Post(
     *     operationId="purchase/create",
     *     @OA\RequestBody(
     *          @OA\MediaType(
     *              mediaType="application/json",
     *              @OA\Schema(
     *                  ref=@Model(type=CreatePurchaseRequest::class)
     *              )
     *          )
     *     )
     * )
     *
     * @OA\Response(
     *     response=200,
     *     description="–í–µ—Ä–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É",
     *     @OA\JsonContent(
     *          ref=@Model(type=PurchaseResponse::class)
     *    )
     * )
     *
     * @OA\Tag(name="Client\Purchase")
     *
     * @param CreatePurchaseRequest $request
     *
     * @return PurchaseResponse
     * @throws InvalidValueException
     * @throws RestException
     * @throws ValueAlreadyUsedException
     */
    public function createRequest(CreatePurchaseRequest $request): PurchaseResponse
    {
        $Purchase = $this->purchaseFactory->create($request);

        $this->purchaseService->processPurchaseRequest($Purchase);

        return new PurchaseResponse($Purchase);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
     *
     * @OA\Post(
     *     operationId="purchase/update",
     *     @OA\RequestBody(
     *          @OA\MediaType(
     *              mediaType="application/json",
     *              @OA\Schema(
     *                  ref=@Model(type=UpdatePurchaseRequest::class)
     *              )
     *          )
     *     )
     * )
     *
     * @OA\Response(
     *     response=200,
     *     description="–í–µ—Ä–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É",
     *     @OA\JsonContent(
     *          ref=@Model(type=PurchaseResponse::class)
     *    )
     * )
     *
     * @OA\Tag(name="Client\Purchase")
     *
     * @param UpdatePurchaseRequest $request
     * @param string                $purchaseId
     *
     * @return PurchaseResponse
     *
     * @throws RestException
     * @throws ValueAlreadyUsedException
     */
    public function updateRequest(UpdatePurchaseRequest $request, string $purchaseId): PurchaseResponse
    {
        $purchase = $this->purchaseService->get($purchaseId);
        $receiptPhoto = $this->purchaseFactory->resolveReceiptPhoto($request->receiptPhotoId);
        if (!$receiptPhoto) {
            throw new InvalidValueException('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        $purchase->setReceiptPhoto($receiptPhoto);

        $this->purchaseService->processPurchaseRequest($purchase);

        return new PurchaseResponse($purchase);
    }
}
